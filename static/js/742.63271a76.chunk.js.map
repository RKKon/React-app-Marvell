{"version":3,"file":"static/js/742.63271a76.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","components/subHeader/SubHeader.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import errorImg from './error.gif'\r\n\r\nimport './ErrorMessage.sass'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    //<img className='error__message' src={process.env.PUBLIC_URL + '/error.gif'} alt=\"Error\" /> //if in folder public\r\n    <img className='error__message' src={errorImg} alt=\"Error\" />\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\nimport SubHeader from '../subHeader/SubHeader';\r\n\r\nimport \"../../sass/style.sass\"\r\nimport './SingleComicPage.sass'\r\n\r\nconst SingeComic = (props) => {\r\n  const {comicId} = useParams();\r\n  const [comic, setComic] = useState(null)\r\n\r\n  const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n  const onComicLoaded = (comic) => {\r\n    setComic(comic)\r\n  }\r\n\r\n  const updateComic = () => {\r\n    clearError();\r\n    getComic(comicId)\r\n      .then(onComicLoaded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateComic();\r\n  }, [comicId])\r\n\r\n  const errorMessage = error ? <ErrorMessage></ErrorMessage> : null;\r\n  const spinner = loading ? <Spinner></Spinner> : null;\r\n  const content = !(loading || error || !comic) ? <View comic={comic}></View> : null;\r\n\r\n  return(\r\n    <>\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n  const {title, description, thumbnail, language, pages, price} = comic\r\n  return (\r\n    \r\n    <div className=\"comicPage\">\r\n      <Helmet>\r\n        <meta\r\n        name=\"description\"\r\n        content={`${title} comics book`}\r\n        />\r\n        <title>{title}</title>\r\n      </Helmet>\r\n      <SubHeader></SubHeader>\r\n\r\n      <div className=\"container flex__display single_comics_media\">\r\n        <div className=\"comic__img\">\r\n          <img src={thumbnail} alt={title} />\r\n        </div>\r\n        <div className=\"comic__text\">\r\n          <div className=\"container flex__display_jc\">\r\n            <h2>{title}</h2>\r\n            <Link to='/comics'>Back to all</Link>\r\n          </div>  \r\n          <p>{description}</p>\r\n          <p className=\"mb__25\">{pages}</p>\r\n          <p className=\"mb__25\">Language: {language}</p>\r\n          <p className=\"mb__25 comic__price\">{price}</p>\r\n        </div> \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SingeComic;","import Avengers from '../../img/Avengers.png';\r\nimport Avengers_logo from '../../img/Avengers_logo.png';\r\n\r\nimport '../../sass/style.sass'\r\nimport './subHeader.sass'\r\n\r\nfunction SubHeader() {\r\n  return (\r\n    <div className=\"container banner__comics mt__50 flex__display_jc\">\r\n      <img src={Avengers} alt={Avengers} />\r\n      <h2>New comics every week! <br/> Stay tuned!</h2>\r\n      <img src={Avengers_logo} alt={Avengers_logo} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SubHeader;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=b728d6eca38d279d414e4429c17a0bc1\";\r\n  //const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62'; //another if above limits hits\r\n  const _baseOffset = 211;\r\n\r\n  const getAllComics = async (offset = 5) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComic);\r\n  };\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComic(res.data.results[0]);\r\n  };\r\n  const _transformComic = (comic) => {\r\n    return {\r\n      id: comic.id,\r\n      title: comic.title,\r\n      description: comic.description || \"There is no description\",\r\n      thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n      price: comic.prices[0].price ? `${comic.prices[0].price}$` : \"NOT AVAILABLE\",\r\n      language: comic.textObjects.language || \"en-us\",\r\n      pages: comic.pageCount\r\n        ? `${comic.pageCount} pages`\r\n        : \"No information about the number of pages\",\r\n    };\r\n  };\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n  const getCharacterPage = async (nameCharacter) => {\r\n    const res = await request(`${_apiBase}characters?name=${nameCharacter}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter); // if res.data.results[0] не будет работать коректно\r\n  };\r\n  const _transformCharacter = (character) => {\r\n    return {\r\n      id: character.id,\r\n      name: character.name,\r\n      description: character.description\r\n        ? `${character.description.slice(0, 210)}...`\r\n        : `There is no description for this character`,\r\n      thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n      homepage: character.urls[0].url,\r\n      wiki: character.urls[1].url,\r\n      comics: character.comics.items,\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterPage,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n    \r\n    setLoading(true)\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n      }\r\n      const data = await response.json();\r\n      setLoading(false)\r\n\r\n      return data;\r\n    } catch(e) {\r\n      setLoading(false)\r\n      setError(e.message)\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, error, request, clearError, setLoading }\r\n}"],"names":["className","src","errorImg","alt","View","comic","title","description","thumbnail","language","pages","price","Helmet","name","content","SubHeader","to","props","comicId","useParams","useState","setComic","useMarvelService","loading","error","getComic","clearError","onComicLoaded","useEffect","then","errorMessage","ErrorMessage","spinner","Spinner","Avengers","Avengers_logo","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllComics","offset","res","results","map","_transformComic","id","path","extension","prices","textObjects","pageCount","getAllCharacters","_transformCharacter","getCharacter","getCharacterPage","nameCharacter","character","slice","homepage","urls","wiki","comics","items"],"sourceRoot":""}