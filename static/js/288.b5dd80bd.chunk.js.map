{"version":3,"file":"static/js/288.b5dd80bd.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/comics/Comics.js","components/pages/ComicsPage.js","components/subHeader/SubHeader.js","services/MarvelService.js","hooks/http.hook.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import errorImg from './error.gif'\r\n\r\nimport './ErrorMessage.sass'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    //<img className='error__message' src={process.env.PUBLIC_URL + '/error.gif'} alt=\"Error\" /> //if in folder public\r\n    <img className='error__message' src={errorImg} alt=\"Error\" />\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport SubHeader from \"../subHeader/SubHeader\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"../../sass/style.sass\";\r\nimport \"./comics.sass\";\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nconst Comics = (props) => {\r\n  const [comicsList, setComicsList] = useState([]);\r\n  const [newComicsLoading, setNewComicsLoading] = useState(false);\r\n  const [offset, setOffset] = useState(5);\r\n  const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n  const { loading, error, getAllComics } = useMarvelService();\r\n\r\n  const onRequest = (offset, initial) => {\r\n    // отрисовывает extra characters on click etc.\r\n    initial ? setNewComicsLoading(false) : setNewComicsLoading(true);\r\n    getAllComics(offset).then(onComicsListLoaded);\r\n  };\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => onRequest(offset, true), []); // отрисовывает comics when created page\r\n\r\n  const onComicsListLoaded = (newComicsList) => {\r\n    let ended = false;\r\n    if (newComicsList.length < 8) {\r\n      ended = true;\r\n    }\r\n\r\n    setComicsList((comicsList) => [...comicsList, ...newComicsList]);\r\n    setNewComicsLoading((newComicsLoading) => false);\r\n    setOffset((offset) => offset + 8);\r\n    setComicsEnded((comicsEnded) => ended);\r\n  };\r\n\r\n  // чтобы не помещать такую конструкцию в метод render/return\r\n  const renderItems = (arr) => {\r\n    const comics = arr.map((item, i) => {\r\n      let imgStyle = { objectFit: \"cover\" };\r\n      if (\r\n        item.thumbnail === \"https://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n      ) {\r\n        // eslint-disable-next-line\r\n        imgStyle = { objectFit: \"unset\" };\r\n      }\r\n\r\n      return (\r\n        <li tabIndex={0} key={item.id} className=\"comics__card\">\r\n          <Link to={`/comics/${item.id}`}>\r\n            <img src={item.thumbnail} alt={item.title} />\r\n            <h2>{item.title} </h2>\r\n            <p>{item.price} </p>\r\n          </Link>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return <ul className=\"flex__display comics__flex__display__wrap\">{comics}</ul>;\r\n  };\r\n\r\n  const comics = renderItems(comicsList);\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading && !newComicsLoading ? <Spinner /> : null;\r\n\r\n  return (\r\n    <div className=\"comics\">\r\n      <SubHeader></SubHeader>\r\n      {errorMessage}\r\n      {spinner}\r\n\r\n      <div className=\"container\">\r\n        {comics}\r\n\r\n        <button\r\n          onClick={() => onRequest(offset)}\r\n          disabled={newComicsLoading}\r\n          //style={{'display': comicsEnded ? 'none' : 'block'}}\r\n          className=\"btn btn__comics__load__more\"\r\n        >\r\n          LOAD MORE\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comics;\r\n","import Comics from '../comics/Comics';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n          <meta\r\n          name=\"description\"\r\n          content=\"Page with list pf our comics\"\r\n          />\r\n          <title>Comics page</title>\r\n      </Helmet>\r\n      <Comics /> \r\n    </>  \r\n  )\r\n}\r\n\r\nexport default ComicsPage;","import Avengers from '../../img/Avengers.png';\r\nimport Avengers_logo from '../../img/Avengers_logo.png';\r\n\r\nimport '../../sass/style.sass'\r\nimport './subHeader.sass'\r\n\r\nfunction SubHeader() {\r\n  return (\r\n    <div className=\"container banner__comics mt__50 flex__display_jc\">\r\n      <img src={Avengers} alt={Avengers} />\r\n      <h2>New comics every week! <br/> Stay tuned!</h2>\r\n      <img src={Avengers_logo} alt={Avengers_logo} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SubHeader;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=b728d6eca38d279d414e4429c17a0bc1\";\r\n  //const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62'; //another if above limits hits\r\n  const _baseOffset = 211;\r\n\r\n  const getAllComics = async (offset = 5) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComic);\r\n  };\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComic(res.data.results[0]);\r\n  };\r\n  const _transformComic = (comic) => {\r\n    return {\r\n      id: comic.id,\r\n      title: comic.title,\r\n      description: comic.description || \"There is no description\",\r\n      thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n      price: comic.prices[0].price ? `${comic.prices[0].price}$` : \"NOT AVAILABLE\",\r\n      language: comic.textObjects.language || \"en-us\",\r\n      pages: comic.pageCount\r\n        ? `${comic.pageCount} pages`\r\n        : \"No information about the number of pages\",\r\n    };\r\n  };\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n  const getCharacterPage = async (nameCharacter) => {\r\n    const res = await request(`${_apiBase}characters?name=${nameCharacter}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter); // if res.data.results[0] не будет работать коректно\r\n  };\r\n  const _transformCharacter = (character) => {\r\n    return {\r\n      id: character.id,\r\n      name: character.name,\r\n      description: character.description\r\n        ? `${character.description.slice(0, 210)}...`\r\n        : `There is no description for this character`,\r\n      thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n      homepage: character.urls[0].url,\r\n      wiki: character.urls[1].url,\r\n      comics: character.comics.items,\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterPage,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n    \r\n    setLoading(true)\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n      }\r\n      const data = await response.json();\r\n      setLoading(false)\r\n\r\n      return data;\r\n    } catch(e) {\r\n      setLoading(false)\r\n      setError(e.message)\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, error, request, clearError, setLoading }\r\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["className","src","errorImg","alt","props","useState","comicsList","setComicsList","newComicsLoading","setNewComicsLoading","offset","setOffset","setComicsEnded","useMarvelService","loading","error","getAllComics","onRequest","initial","then","onComicsListLoaded","useEffect","newComicsList","ended","length","comicsEnded","comics","arr","map","item","i","thumbnail","objectFit","tabIndex","to","id","title","price","renderItems","errorMessage","ErrorMessage","spinner","Spinner","SubHeader","onClick","disabled","Helmet","name","content","Avengers","Avengers_logo","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","res","results","_transformComic","getComic","comic","description","path","extension","prices","language","textObjects","pages","pageCount","getAllCharacters","_transformCharacter","getCharacter","getCharacterPage","nameCharacter","character","slice","homepage","urls","wiki","items","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}