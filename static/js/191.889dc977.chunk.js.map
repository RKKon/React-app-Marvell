{"version":3,"file":"static/js/191.889dc977.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomCharacterInfo/RandomCharacterInfo.js","components/charactersList/CharactersList.js","components/skeleton/Skeleton.js","components/form/Form.js","components/characterInfo/CharacterInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import errorImg from './error.gif'\r\n\r\nimport './ErrorMessage.sass'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    //<img className='error__message' src={process.env.PUBLIC_URL + '/error.gif'} alt=\"Error\" /> //if in folder public\r\n    <img className='error__message' src={errorImg} alt=\"Error\" />\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport Decoration from '../../img/subHeader/Decoration.png';\r\n\r\nimport '../../sass/style.sass'\r\nimport './RandomCharacterInfo.sass'\r\n\r\nconst RandomCharacterInfo = (props) => {\r\n  const [character, setCharacter] = useState({})\r\n\r\n  const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateCharacter()\r\n    //timerId = setInterval(updateCharacter, 6000)\r\n    //return () => clearInterval(timerId)\r\n  }, []);\r\n\r\n  const onCharacterLoaded = (character) => {\r\n    // setLoading(false)\r\n    // setError(false)\r\n    setCharacter(character)\r\n  }\r\n\r\n  //const onCharacterLoading = () => setLoading(true)\r\n  // const onError = () => {\r\n  //   setLoading(false)\r\n  //   setError(true)\r\n  // }\r\n  \r\n  const updateCharacter = () => {\r\n    clearError();\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    getCharacter(id)\r\n      .then(onCharacterLoaded)\r\n  }\r\n  \r\n\r\n  const errorMessage = error ? <ErrorMessage></ErrorMessage> : null;\r\n  const spinner = loading ? <Spinner></Spinner> : null;\r\n  const content = !(loading || error) ? <View character={character}></View> : null;\r\n\r\n  return (\r\n    <div className=\"sub__header mt__50\">\r\n      <div className=\"container flex__display random_character_media\">\r\n        {errorMessage}\r\n        {spinner}\r\n        {content}\r\n        <div className=\"random__character__block\">\r\n          <h2>Random character for today! <br /> \r\n              Do you want to get to know him better?</h2>\r\n          <h3>Or choose another one</h3>\r\n          <button onClick={updateCharacter} className=\"btn\">TRY IT</button>\r\n          <img src={Decoration} alt='mjolnir' />\r\n        </div>   \r\n      </div>\r\n    </div>\r\n  )  \r\n}\r\n\r\nconst View = ({character}) => {\r\n  const {name, description, thumbnail, homepage, wiki} = character;\r\n  return (\r\n    <div className=\"info__block flex__display\">\r\n      <div>\r\n          <img className='random__character__main__img' src={thumbnail} alt='Random character' />\r\n      </div>\r\n      <div>\r\n          <h2>{name}</h2>\r\n          <p>{description}</p>\r\n          <a href={homepage}><button className=\"btn\">HOMEPAGE</button></a>\r\n          <a href={wiki}><button className=\"btn grey__btn\">WIKI</button></a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RandomCharacterInfo;","import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport ErrorMessage from '../errorMessage/ErrorMessage'\r\nimport Spinner from '../spinner/Spinner'\r\n\r\nimport '../../sass/style.sass'\r\nimport './charactersList.sass'\r\n\r\nconst CharactersList = (props) => {\r\n  const [charactersList, setCharactersList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(213);\r\n  const [charEnded, setCharEnded] = useState(false);\r\n\r\n\r\n  const {loading, error, getAllCharacters} = useMarvelService();\r\n\r\n  const onRequest = (offset, initial) => { // отрисовывает extra characters on click etc. \r\n    initial ? setNewItemLoading(false)  : setNewItemLoading(true)\r\n    getAllCharacters(offset)\r\n      .then(onCharactersListLoaded)\r\n  }\r\n\r\n  useEffect(() => { onRequest(offset, true) }, []) // отрисовывает characters when create page\r\n\r\n  const onCharactersListLoaded = (newCharactersList) => {\r\n    let ended = false;\r\n    if (newCharactersList.length < 9) { ended = true; }\r\n\r\n    setCharactersList(charactersList => [...charactersList, ...newCharactersList])\r\n    setNewItemLoading(newItemLoading => false)\r\n    setOffset(offset => offset + 9)\r\n    setCharEnded(charEnded => ended)\r\n  }\r\n\r\n  const itemRefs = useRef([])\r\n  const focusOnItem = id => {\r\n    itemRefs.current.forEach(item => item.classList.remove('card__active'));\r\n    itemRefs.current[id].classList.add('card__active');\r\n    itemRefs.current[id].focus();\r\n  }\r\n\r\n  // чтобы не помещать такую конструкцию в метод render/return\r\n  function renderItems(arr) {\r\n    const items = arr.map((item, i) => {\r\n      let imgStyle = {'objectFit' : 'cover'}\r\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        // eslint-disable-next-line\r\n        imgStyle = {'objectFit' : 'unset'}\r\n      }\r\n      return (\r\n        <li className={`characters__card`} tabIndex={0} key={item.id} \r\n        ref={el => itemRefs.current[i] = el}  \r\n        onClick={() => {\r\n          props.onCharacterSelected(item.id);\r\n          focusOnItem(i);\r\n          }}\r\n          onKeyPress={e => {\r\n            if (e.key === ' ' || e.key === 'Enter') {\r\n              props.onCharacterSelected(item.id);\r\n              focusOnItem(i);\r\n            }\r\n          }}>\r\n          <img src={item.thumbnail} alt={item.name} />\r\n          <h2>{item.name}</h2>\r\n        </li>\r\n      )\r\n    }) \r\n    return (\r\n      <ul className=\"flex__display__content contetnt__container mb__50\">\r\n        {items}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  const items = renderItems(charactersList);\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n\r\n  return (\r\n    <div className=\"characters\">\r\n        {errorMessage}\r\n        {spinner}\r\n        {items}\r\n      <button disabled={newItemLoading} \r\n              onClick={() => onRequest(offset)}\r\n              style={{'display': charEnded ? 'none' : 'block'}} \r\n              className=\"btn btn__load__more\">LOAD MORE</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nCharactersList.protoTypes = {\r\n  onCharacterSelected: PropTypes.number\r\n}\r\n\r\nexport default CharactersList;","import { Component } from 'react';\r\n\r\nimport './Skeleton.sass'\r\nimport '../../sass/style.sass'\r\n\r\nclass Skeleton extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"character__search\">\r\n      <h2>Please select a character to see information</h2>\r\n      <div className=\"skeleton\">\r\n          <div className=\"pulse skeleton__header\">\r\n              <div className=\"pulse skeleton__circle\"></div>\r\n              <div className=\"pulse skeleton__mini\"></div>\r\n          </div>\r\n          <div className=\"pulse skeleton__block\"></div>\r\n          <div className=\"pulse skeleton__block\"></div>\r\n          <div className=\"pulse skeleton__block\"></div>\r\n      </div>    \r\n    </div> \r\n    )\r\n  }\r\n}\r\n\r\nexport default Skeleton;\r\n\r\n","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport { Link } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport '../../sass/style.sass'\r\nimport './form.sass'\r\n\r\nfunction CharacterSearchForm() {\r\n  const [charName, setCharName] = useState(null)\r\n  const {getCharacterPage, error, loading, clearError} = useMarvelService();\r\n\r\n  const getCharacter = (nameCharacter) => { // getting char from API then use function to put in charName\r\n    getCharacterPage(nameCharacter)\r\n      .then(onCharacterLoaded)   \r\n  }\r\n\r\n  const onCharacterLoaded = (charName) => { // if нету параметра (charName) то не работает!\r\n    clearError()\r\n    setCharName(charName)\r\n    console.log(charName);\r\n  }\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const renderCharacter = !charName ? null : charName.length ? \r\n      <div> \r\n        <p className=\"character__form__answer\">There is! Visit {charName[0].name} page?</p>\r\n        <Link to={`/characters/${charName[0].id}`}>\r\n          <button  className=\"btn grey__btn grey__btn__search\" disabled={loading}>TO PAGE</button> \r\n        </Link>  \r\n      </div> : \r\n      <p className=\"character__form__bad__answer\">The character was not found. Check the name and try again</p>\r\n\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{name: ''}}\r\n        validationSchema={Yup.object({name: Yup.string().required('This field is required') })}\r\n        onSubmit= { values => getCharacter(values.name) } >\r\n        \r\n        <Form className=\"character__form\" action=\"#\">\r\n          <h2>Or find a character by name:</h2>\r\n          <div>\r\n            <Field id=\"name\" name='name' type=\"text\" placeholder=\"Enter name\" />\r\n            <button type=\"submit\" className=\"btn\">FIND</button>\r\n          </div>\r\n          {renderCharacter}\r\n          {errorMessage}\r\n          <FormikErrorMessage name='name' className=\"character__form__bad__answer\" component=\"p\" />\r\n        </Form>\r\n      </Formik>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CharacterSearchForm;","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Skeleton from '../skeleton/Skeleton'\r\nimport Form from '../form/Form';\r\n\r\nimport '../../sass/style.sass'\r\nimport './characterInfo.sass'\r\n\r\nconst CharacterInfo = (props) => {\r\n  const [character, setCharacter] = useState(null);\r\n\r\n  const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n  const onCharacterLoaded = (character) => {\r\n    setCharacter(character)\r\n  }\r\n\r\n  const updateCharacter = () => {\r\n    const {characterId} = props;\r\n    if (!characterId) { return; }\r\n    clearError();\r\n\r\n    getCharacter(characterId)\r\n      .then(onCharacterLoaded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateCharacter();\r\n  },[props.characterId])\r\n\r\n  const skeleton = character || loading || error ? null : <Skeleton/>;\r\n  const errorMessage = error ? <ErrorMessage/> : null;\r\n  const spinner = loading ? <Spinner/> : null;\r\n  const content = !(loading || error || !character) ? <View character={character}/> : null;\r\n  \r\n  return (\r\n    <div className='need_flex_style_if_use_itself'>\r\n      <div className=\"character__info__active\">\r\n        {skeleton}\r\n        {errorMessage}\r\n        {spinner}\r\n        {content}\r\n      </div>\r\n      <Form></Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst View = ({character}) => {\r\n  const {name, description, thumbnail, homepage, wiki, comics} = character;\r\n  return (\r\n    <>\r\n      <img src={thumbnail} alt={name} />\r\n      <h2 className=\"character__info__active__h2\">{name}</h2>\r\n      <a href={homepage}><button className=\"btn first__character__btn\">HOMEPAGE</button></a>\r\n      <a href={wiki}><button className=\"btn grey__btn second__character__btn\">WIKI</button></a>\r\n      <p>{description}</p>\r\n      <h3>Comics:</h3>\r\n      <ul className='character__info__ul'>\r\n        {comics.length > 0 ? null : 'There is no comics for that character'}\r\n        {\r\n          comics.map((item, i) => {\r\n            // eslint-disable-next-line\r\n            if (i > 9) return; //limit 10 comics\r\n            return (\r\n              <li key={i}><Link to={`/comics/${item.resourceURI.substring(43)}`}>{item.name}</Link></li>\r\n            )\r\n          })\r\n        }       \r\n      </ul>\r\n    </>\r\n  )\r\n}\r\n\r\nCharacterInfo.propTypes = {\r\n  characterId: PropTypes.number \r\n}\r\n\r\nexport default CharacterInfo;","import { Component } from \"react\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false\r\n  }\r\n\r\n  // static getDerivedStateFromError(error) { // how setState but works with Error. componentDidCatch may be better \r\n  //   return {error: true};\r\n  // }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({error: true})\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage></ErrorMessage>\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomCharacterInfo from '../randomCharacterInfo/RandomCharacterInfo';\r\nimport CharactersList from '../charactersList/CharactersList';\r\nimport CharacterInfo from '../characterInfo/CharacterInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport '../../sass/style.sass'\r\nimport '../app/app.sass'\r\n\r\nimport bg_man from '../../img/bg_asset.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedCharacter, SetSelectedCharacter] = useState(null)\r\n\r\n  const onCharacterSelected = (id) => SetSelectedCharacter(id)\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n        name=\"description\"\r\n        content=\"Web site created using create-react-app\"\r\n        />\r\n        <title>React app Marvell</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomCharacterInfo />\r\n      </ErrorBoundary>\r\n      <div className=\"container mt__20 flex__display character_overlay_media\">\r\n        <ErrorBoundary>\r\n          <CharactersList onCharacterSelected={onCharacterSelected} />\r\n        </ErrorBoundary> \r\n        <ErrorBoundary>\r\n          <CharacterInfo characterId={selectedCharacter} />\r\n        </ErrorBoundary>  \r\n      </div>\r\n      <img className=\"bg__man\" src={bg_man} alt={bg_man} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n  const {loading, request, error, clearError} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=b728d6eca38d279d414e4429c17a0bc1'; \r\n  //const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62'; //another if above limits hits\r\n  const _baseOffset = 211\r\n\r\n  const getAllComics = async (offset = 5) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComic); \r\n  }\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n    return _transformComic(res.data.results[0])\r\n  }\r\n  const _transformComic = comic => {\r\n    return {\r\n      id: comic.id,\r\n      title: comic.title,\r\n      description: comic.description || 'There is no description',\r\n      thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n      price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'NOT AVAILABLE',\r\n      language: comic.textObjects.language || 'en-us',\r\n      pages: comic.pageCount ? `${comic.pageCount} pages` : 'No information about the number of pages',\r\n    }\r\n  }\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0])\r\n  }\r\n  const getCharacterPage = async (nameCharacter) => {\r\n    const res = await request(`${_apiBase}characters?name=${nameCharacter}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter) // if res.data.results[0] не будет работать коректно\r\n  }\r\n  const _transformCharacter = (character) => {\r\n    return {\r\n      id: character.id,\r\n      name: character.name,\r\n      description: character.description ? `${character.description.slice(0,210)}...` : `There is no description for this character`,\r\n      thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\r\n      homepage: character.urls[0].url,\r\n      wiki: character.urls[1].url,\r\n      comics: character.comics.items,\r\n    }\r\n  }\r\n\r\n  return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterPage}\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n    \r\n    setLoading(true)\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n      }\r\n      const data = await response.json();\r\n      setLoading(false)\r\n\r\n      return data;\r\n    } catch(e) {\r\n      setLoading(false)\r\n      setError(e.message)\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, error, request, clearError, setLoading }\r\n}"],"names":["className","src","errorImg","alt","View","character","name","description","thumbnail","homepage","wiki","href","props","useState","setCharacter","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateCharacter","onCharacterLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","Decoration","CharactersList","charactersList","setCharactersList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharactersListLoaded","newCharactersList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharacterSelected","onKeyPress","e","key","renderItems","disabled","style","protoTypes","PropTypes","Skeleton","Component","charName","setCharName","getCharacterPage","console","log","renderCharacter","to","initialValues","validationSchema","Yup","required","onSubmit","values","nameCharacter","action","type","placeholder","component","comics","resourceURI","substring","characterId","skeleton","Form","ErrorBoundary","state","errorInfo","this","setState","children","selectedCharacter","SetSelectedCharacter","Helmet","bg_man","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllComics","res","results","_transformComic","getComic","comic","title","path","extension","price","prices","language","textObjects","pages","pageCount","_transformCharacter","slice","urls"],"sourceRoot":""}