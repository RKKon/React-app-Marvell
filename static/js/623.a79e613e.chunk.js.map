{"version":3,"file":"static/js/623.a79e613e.chunk.js","mappings":"4NAWA,EAPqB,WACnB,OAEE,gBAAKA,UAAU,iBAAiBC,IAAKC,EAAUC,IAAI,SAEtD,C,0KCoCD,IAAMC,EAAO,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACNC,EAAgCD,EAAhCC,KAAMC,EAA0BF,EAA1BE,YAAaC,EAAaH,EAAbG,UAC1B,OAEE,iBAAKR,UAAU,gBAAf,WACE,UAACS,EAAA,EAAD,YACE,iBACAH,KAAK,cACLI,QAAO,UAAKJ,MAEZ,2BAAQA,QAEV,SAACK,EAAA,EAAD,KAEA,iBAAKX,UAAU,2BAAf,WACE,gBAAKA,UAAU,gBAAf,UACE,gBAAKC,IAAKO,EAAWL,IAAKG,OAE5B,iBAAKN,UAAU,iBAAf,WACE,wBAAKM,KACL,uBAAIC,YAMb,EAED,EA7DA,SAA6BK,GAC3B,IAAOC,GAAeC,EAAAA,EAAAA,MAAfD,YACP,GAA0CE,EAAAA,EAAAA,UAAS,MAAnD,eAAOV,EAAP,KAAsBW,EAAtB,KAEA,GAAmDC,EAAAA,EAAAA,KAA5CC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,aAAcC,EAArC,EAAqCA,WAE/BC,EAAgB,SAACjB,GACrBW,EAAiBX,EAClB,GAQDkB,EAAAA,EAAAA,YAAU,WALRF,IACAD,EAAaP,GACVW,KAAKF,EAKT,GAAE,CAACT,IAEJ,IAAMY,EAAeN,GAAQ,SAACO,EAAA,EAAD,IAAgC,KACvDC,EAAUT,GAAU,SAACU,EAAA,EAAD,IAAsB,KAC1ClB,EAAYQ,GAAWC,IAAUd,EAA+D,MAA9C,SAACD,EAAD,CAAMC,cAAeA,IAE7E,OACE,gCACGoB,EACAE,EACAjB,IAGN,C,iMC3BD,MAVA,WACE,OACE,iBAAKV,UAAU,mDAAf,WACE,gBAAKC,IAAK4B,EAAU1B,IAAK0B,KACzB,qDAA2B,kBAA3B,mBACA,gBAAK5B,IAAK6B,EAAe3B,IAAK2B,MAGnC,C,kGC4CD,EAxDyB,WAEvB,MCFqB,WACrB,OAA8Bf,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBa,EAAhB,KACA,GAA0BhB,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAca,EAAd,KAEMC,GAAUC,EAAAA,EAAAA,aAAW,yCAAC,WAAOC,GAAP,uGAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,CAAC,eAAgB,oBAE9FP,GAAW,GAFe,kBAKDQ,MAAMJ,EAAK,CAACC,OAAAA,EAAQC,KAAAA,EAAMC,QAAAA,IALzB,WAKlBE,EALkB,QAMVC,GANU,uBAOhB,IAAIC,MAAJ,0BAA6BP,EAA7B,qBAA6CK,EAASG,SAPtC,yBASLH,EAASI,OATJ,eASlBC,EATkB,OAUxBd,GAAW,GAVa,kBAYjBc,GAZiB,wCAcxBd,GAAW,GACXC,EAAS,KAAEc,SAfa,+DAAD,sDAkBxB,IAIH,MAAO,CAAC5B,QAAAA,EAASC,MAAAA,EAAOc,QAAAA,EAASZ,YAFda,EAAAA,EAAAA,cAAY,kBAAMF,EAAS,KAAf,GAAsB,IAERD,WAAAA,EAC9C,CDzB+CgB,GAAvC7B,EAAP,EAAOA,QAASe,EAAhB,EAAgBA,QAASd,EAAzB,EAAyBA,MAAOE,EAAhC,EAAgCA,WAE1B2B,EAAW,4CACXC,EAAU,0CAIVC,EAAY,yCAAG,8GAAOC,EAAP,+BAAgB,EAAhB,SACDlB,EAAQ,GAAD,OAAIe,EAAJ,iCAAqCG,EAArC,YAA+CF,IADrD,cACbG,EADa,yBAEZA,EAAIP,KAAKQ,QAAQC,IAAIC,IAFT,2CAAH,qDAIZC,EAAQ,yCAAG,WAAOC,GAAP,4FACGxB,EAAQ,GAAD,OAAIe,EAAJ,kBAAsBS,EAAtB,YAA4BR,IADtC,cACTG,EADS,yBAERG,EAAgBH,EAAIP,KAAKQ,QAAQ,KAFzB,2CAAH,sDAIRE,EAAkB,SAAAG,GACtB,MAAO,CACLD,GAAIC,EAAMD,GACVE,MAAOD,EAAMC,MACbpD,YAAamD,EAAMnD,aAAe,0BAClCC,UAAWkD,EAAMlD,UAAUoD,KAAO,IAAMF,EAAMlD,UAAUqD,UACxDC,MAAOJ,EAAMK,OAAO,GAAGD,MAAhB,UAA2BJ,EAAMK,OAAO,GAAGD,MAA3C,KAAsD,gBAC7DE,SAAUN,EAAMO,YAAYD,UAAY,QACxCE,MAAOR,EAAMS,UAAN,UAAqBT,EAAMS,UAA3B,UAA+C,2CAEzD,EAEKC,EAAgB,yCAAG,8GAAOjB,EAAP,+BAtBL,IAsBK,SACLlB,EAAQ,GAAD,OAAIe,EAAJ,qCAAyCG,EAAzC,YAAmDF,IADrD,cACjBG,EADiB,yBAEhBA,EAAIP,KAAKQ,QAAQC,IAAIe,IAFL,2CAAH,qDAIhBjD,EAAY,yCAAG,WAAOqC,GAAP,4FACDxB,EAAQ,GAAD,OAAIe,EAAJ,sBAA0BS,EAA1B,YAAgCR,IADtC,cACbG,EADa,yBAEZiB,EAAoBjB,EAAIP,KAAKQ,QAAQ,KAFzB,2CAAH,sDAIZiB,EAAgB,yCAAG,WAAOC,GAAP,4FACLtC,EAAQ,GAAD,OAAIe,EAAJ,2BAA+BuB,EAA/B,YAAgDtB,IADlD,cACjBG,EADiB,yBAEhBA,EAAIP,KAAKQ,QAAQC,IAAIe,IAFL,2CAAH,sDAIhBA,EAAsB,SAACG,GAC3B,MAAO,CACLf,GAAIe,EAAUf,GACdnD,KAAMkE,EAAUlE,KAChBC,YAAaiE,EAAUjE,YAAV,UAA2BiE,EAAUjE,YAAYkE,MAAM,EAAE,KAAzD,oDACbjE,UAAWgE,EAAUhE,UAAUoD,KAAO,IAAMY,EAAUhE,UAAUqD,UAChEa,SAAUF,EAAUG,KAAK,GAAGxC,IAC5ByC,KAAMJ,EAAUG,KAAK,GAAGxC,IACxB0C,OAAQL,EAAUK,OAAOC,MAE5B,EAED,MAAO,CAAC5D,QAAAA,EAASC,MAAAA,EAAOiD,iBAAAA,EAAkBhD,aAAAA,EAAcC,WAAAA,EAAY6B,aAAAA,EAAcM,SAAAA,EAAUc,iBAAAA,EAC7F,C","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleCharacterPage/SingleCharacterPage.js","components/subHeader/SubHeader.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import errorImg from './error.gif'\r\n\r\nimport './ErrorMessage.sass'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    //<img className='error__message' src={process.env.PUBLIC_URL + '/error.gif'} alt=\"Error\" /> //if in folder public\r\n    <img className='error__message' src={errorImg} alt=\"Error\" />\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport useMarvelService from '../../../services/MarvelService';\r\nimport ErrorMessage from '../../errorMessage/ErrorMessage';\r\nimport Spinner from '../../spinner/Spinner';\r\nimport SubHeader from '../../subHeader/SubHeader';\r\n\r\nimport '../../../sass/style.sass'\r\nimport './SingleCharacterPage.sass'\r\n\r\nfunction SingleCharacterPage(props) {\r\n  const {characterId} = useParams();\r\n  const [characterPage, setCharacterPage] = useState(null)\r\n\r\n  const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n  const onComicLoaded = (characterPage) => {\r\n    setCharacterPage(characterPage)\r\n  }\r\n\r\n  const updateComic = () => {\r\n    clearError();\r\n    getCharacter(characterId)\r\n      .then(onComicLoaded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateComic();\r\n  }, [characterId])\r\n\r\n  const errorMessage = error ? <ErrorMessage></ErrorMessage> : null;\r\n  const spinner = loading ? <Spinner></Spinner> : null;\r\n  const content = !(loading || error || !characterPage) ? <View characterPage={characterPage}></View> : null;\r\n\r\n  return (\r\n    <>\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n      </>\r\n  )\r\n}\r\n\r\nconst View = ({characterPage}) => {\r\n  const {name, description, thumbnail} = characterPage\r\n  return (\r\n    \r\n    <div className=\"CharacterPage\">\r\n      <Helmet>\r\n        <meta\r\n        name=\"description\"\r\n        content={`${name}`}\r\n        />\r\n        <title>{name}</title>\r\n      </Helmet>\r\n      <SubHeader/>\r\n\r\n      <div className=\"container flex__display \">\r\n        <div className=\"character_img\">\r\n          <img src={thumbnail} alt={name} />\r\n        </div>\r\n        <div className=\"character_text\">\r\n          <h2>{name}</h2>\r\n          <p>{description}</p>\r\n        </div>  \r\n      </div> \r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SingleCharacterPage;","import Avengers from '../../img/Avengers.png';\r\nimport Avengers_logo from '../../img/Avengers_logo.png';\r\n\r\nimport '../../sass/style.sass'\r\nimport './subHeader.sass'\r\n\r\nfunction SubHeader() {\r\n  return (\r\n    <div className=\"container banner__comics mt__50 flex__display_jc\">\r\n      <img src={Avengers} alt={Avengers} />\r\n      <h2>New comics every week! <br/> Stay tuned!</h2>\r\n      <img src={Avengers_logo} alt={Avengers_logo} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SubHeader;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n  const {loading, request, error, clearError} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=b728d6eca38d279d414e4429c17a0bc1'; \r\n  //const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62'; //another if above limits hits\r\n  const _baseOffset = 211\r\n\r\n  const getAllComics = async (offset = 5) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComic); \r\n  }\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n    return _transformComic(res.data.results[0])\r\n  }\r\n  const _transformComic = comic => {\r\n    return {\r\n      id: comic.id,\r\n      title: comic.title,\r\n      description: comic.description || 'There is no description',\r\n      thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n      price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'NOT AVAILABLE',\r\n      language: comic.textObjects.language || 'en-us',\r\n      pages: comic.pageCount ? `${comic.pageCount} pages` : 'No information about the number of pages',\r\n    }\r\n  }\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0])\r\n  }\r\n  const getCharacterPage = async (nameCharacter) => {\r\n    const res = await request(`${_apiBase}characters?name=${nameCharacter}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter) // if res.data.results[0] не будет работать коректно\r\n  }\r\n  const _transformCharacter = (character) => {\r\n    return {\r\n      id: character.id,\r\n      name: character.name,\r\n      description: character.description ? `${character.description.slice(0,210)}...` : `There is no description for this character`,\r\n      thumbnail: character.thumbnail.path + '.' + character.thumbnail.extension,\r\n      homepage: character.urls[0].url,\r\n      wiki: character.urls[1].url,\r\n      comics: character.comics.items,\r\n    }\r\n  }\r\n\r\n  return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterPage}\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n    \r\n    setLoading(true)\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n      }\r\n      const data = await response.json();\r\n      setLoading(false)\r\n\r\n      return data;\r\n    } catch(e) {\r\n      setLoading(false)\r\n      setError(e.message)\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, error, request, clearError, setLoading }\r\n}"],"names":["className","src","errorImg","alt","View","characterPage","name","description","thumbnail","Helmet","content","SubHeader","props","characterId","useParams","useState","setCharacterPage","useMarvelService","loading","error","getCharacter","clearError","onComicLoaded","useEffect","then","errorMessage","ErrorMessage","spinner","Spinner","Avengers","Avengers_logo","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllComics","offset","res","results","map","_transformComic","getComic","id","comic","title","path","extension","price","prices","language","textObjects","pages","pageCount","getAllCharacters","_transformCharacter","getCharacterPage","nameCharacter","character","slice","homepage","urls","wiki","comics","items"],"sourceRoot":""}